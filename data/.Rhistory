library(tidyverse)
install(tidyverse)
install.packages(tidyverse)
install.packages('tidyverse')
library(tidyverse)
library(ggplot2)
install.packages("ggplot2")
library(tidyverse)
install.packages("terra")
install.packages("car")
install.packages("Hmisc")
install.packages("lme4")
install.packages("MCMCglmm")
install.packages("lattice")
library(car)
install.packages("multcomp")
install.packages("lattice")
install.packages("sf")
getwd()
install.packages("fish")
suppressPackageStartupMessages(library(tidyverse))
options(readr.show_progress = FALSE)
setwd('C:/Users/xr49abiw/Documents/MovementDatabase/data')
datadir <- "data"
database <- read_tsv("MovementDatabaseCleaned.txt")
eltonbird <- read_tsv("BirdFuncDat.txt")
eltonmam <- read_tsv("MamFuncDat.txt")
repdat <- read_tsv('ReptileDAT.txt')
mvertdat<- read_tsv('MarineVertDAT.txt')
anidat<- read_tsv('AnimalTraits.txt')
fb <-read_tsv('FishBase.txt')
slb <-read_tsv('SealifeBase.txt')
taxonomy <- read_csv("taxonomy.csv")|>
distinct(original, gbif.binomial, class, family) |>
filter(!is.na(original))
birds <- eltonbird |>
transmute(
original = Scientific,
mass = `BodyMass-Value`
) |>
drop_na() |>
distinct_all() |>
left_join(taxonomy, by = "original") |>
group_by(gbif.binomial) |>
summarize(birdmass = mean(mass), .groups = "drop") #VERY IMPORANT - HOW TO AGGREGATE
mamm <- eltonmam |>
transmute(
original = Scientific,
mass = `BodyMass-Value`
) |>
drop_na() |>
distinct_all() |>
left_join(taxonomy, by = "original") |>
group_by(gbif.binomial) |>
summarize(mammalmass = mean(mass), .groups = "drop")
rep <- repdat |>
transmute(
original = Binomial,
mass = `Maximum mass (log10(g))`
) |>
drop_na() |>
distinct_all() |>
left_join(taxonomy, by = "original") |>
group_by(gbif.binomial) |>
summarize(repmass = mean(mass), .groups = "drop")
anim<-anidat |>
transmute(
original = species,
mass = `body mass`
) |>
drop_na() |>
distinct_all() |>
left_join(taxonomy, by = "original") |>
group_by(gbif.binomial) |>
summarize(animass = mean(mass), .groups = "drop")
marine <- mvertdat |>
transmute(
original = Species,
mass = `BM_g`
) |>
drop_na() |>
distinct_all() |>
left_join(taxonomy, by = "original") |>
group_by(gbif.binomial) |>
summarize(marinemass = mean(mass), .groups = "drop")
fish <- fb |>
transmute(
original = Species,
mass = `Weight`
) |>
drop_na() |>
distinct_all() |>
left_join(taxonomy, by = "original") |>
group_by(gbif.binomial) |>
summarize(fishmass = mean(mass), .groups = "drop")
sealife <- slb |>
transmute(
original = Species,
mass = `Weight`
) |>
drop_na() |>
distinct_all() |>
left_join(taxonomy, by = "original") |>
group_by(gbif.binomial) |>
summarize(seamass = mean(mass), .groups = "drop")
# Combine mass data from different sources into a single 'masses' data frame
masses <- bind_rows(
birds |> select(gbif.binomial, birdmass),
mamm |> select(gbif.binomial, mammalmass),
anim |> select(gbif.binomial, animass),
rep |> select(gbif.binomial, repmass),
marine |> select(gbif.binomial, marinemass),
fb |> select(gbif.binomial, fishmass),
slb |> select(gbif.binomial, seamass)
) |>
mutate(
Mass = coalesce(birdmass, mammalmass, animass, repmass, marinemass, fishmass, seamass),
Source = case_when(
!is.na(birdmass) ~ "Wilman et al 2014",
!is.na(mammalmass) ~ "Wilman et al 2014",
!is.na(animass) ~ "Slavenko et al 2016",
!is.na(repmass) ~ "Herberstein et al 2022",
!is.na(marinemass) ~ "McCauley et al 2015",
!is.na(fishmass) ~ "FishBase",
!is.na(seamass) ~ "SeaLifeBase",
TRUE ~ NA_character_
),
Unit = case_when(
!is.na(birdmass) ~ "g",
!is.na(mammalmass) ~ "g",
!is.na(animass) ~ "log(10)g",
!is.na(repmass) ~ "kg",
!is.na(marinemass) ~ "g",
!is.na(fishmass) ~ "g",
!is.na(seamass) ~ "g",
TRUE ~ NA_character_
)
)  |>
select(-c(birdmass, mammalmass, animass, repmass, marinemass, fishmass, seamass))
View(birds)
View(birds)
birds |> select(gbif.binomial, birdmass)
mamm |> select(gbif.binomial, mammalmass)
anim |> select(gbif.binomial, animass)
rep |> select(gbif.binomial, repmass)
marine |> select(gbif.binomial, marinemass)
fb |> select(gbif.binomial, fishmass)
slb |> select(gbif.binomial, seamass)
fish <- fb |>
transmute(
original = Species,
mass = `Weight`
) |>
drop_na() |>
distinct_all() |>
left_join(taxonomy, by = "original") |>
group_by(gbif.binomial) |>
summarize(fishmass = mean(mass), .groups = "drop")
View(fish)
View(fish)
sealife <- slb |>
transmute(
original = Species,
mass = `Weight`
) |>
drop_na() |>
distinct_all() |>
left_join(taxonomy, by = "original") |>
group_by(gbif.binomial) |>
summarize(seamass = mean(mass), .groups = "drop")
# Combine mass data from different sources into a single 'masses' data frame
masses <- bind_rows(
birds |> select(gbif.binomial, birdmass),
mamm |> select(gbif.binomial, mammalmass),
anim |> select(gbif.binomial, animass),
rep |> select(gbif.binomial, repmass),
marine |> select(gbif.binomial, marinemass),
fish |> select(gbif.binomial, fishmass),
sealife |> select(gbif.binomial, seamass)
) |>
mutate(
Mass = coalesce(birdmass, mammalmass, animass, repmass, marinemass, fishmass, seamass),
Source = case_when(
!is.na(birdmass) ~ "Wilman et al 2014",
!is.na(mammalmass) ~ "Wilman et al 2014",
!is.na(animass) ~ "Slavenko et al 2016",
!is.na(repmass) ~ "Herberstein et al 2022",
!is.na(marinemass) ~ "McCauley et al 2015",
!is.na(fishmass) ~ "FishBase",
!is.na(seamass) ~ "SeaLifeBase",
TRUE ~ NA_character_
),
Unit = case_when(
!is.na(birdmass) ~ "g",
!is.na(mammalmass) ~ "g",
!is.na(animass) ~ "log(10)g",
!is.na(repmass) ~ "kg",
!is.na(marinemass) ~ "g",
!is.na(fishmass) ~ "g",
!is.na(seamass) ~ "g",
TRUE ~ NA_character_
)
)  |>
select(-c(birdmass, mammalmass, animass, repmass, marinemass, fishmass, seamass))
# Left join by taxonomy, adding in trait refs to the body mass source column
db <- database |>
left_join(taxonomy, by = c("Species ID" = "original")) |>
mutate(
`Body mass source` = ifelse(is.na(`Body mass`), "NA", TraitRef)
)
# Modify the body mass source column based on missing values and existing data
db1 <- db |>
mutate(
`Body mass source` = ifelse(!is.na(`Body mass`) & is.na(`Body mass source`), MetaRef, `Body mass source`)
)
# Include missing body mass data from the masses data frame
db2 <- db1 |>
left_join(masses, by = c("gbif.binomial" = "gbif.binomial"),relationship = "many-to-many") |>
mutate(
`Body mass source` = ifelse(is.na(`Body mass`) | `Body mass` == "", "databases", `Body mass source`),
`Body mass` = ifelse(is.na(`Body mass`) | `Body mass` == "", Mass, `Body mass`)
) |>
select(-Mass)  # Remove Source, Mass, and Unit columns from masses dataframe
write_csv(db2, "correctedspecies.csv") #WRITE NAME name.csv
writeLines(
strftime(Sys.time()),
con = "logs/CorrectSpeciesNames.R"
)
View(db2)
View(db2)
library(tidyverse)
setwd('C:/Users/xr49abiw/Documents/MovementDatabase/data')
dbcorr <- read_csv("correctedspecies.csv")
dbtrans <- dbcorr |> relocate(gbif.binomial, .after = `Species ID`) |>
relocate(`family`, .after = `Sub-rank`)|>
relocate(`class`, .after = `Sub-rank`)|>
relocate(`Body mass source`, .after = `TraitRef`)|>
relocate( `Source`,.after = `Body mass source`)|>
rename(Class_gbif = `class`)|>
rename(Family_gbif = `family`)|>
rename(Species_ID_gbif = `gbif.binomial`)|>
rename(`Body mass database` = `Source`) |>
rename(`Body mass database Unit` = `Unit`) |>
relocate(`Body mass database Unit`, .after = `Body mass Units`)|>
select(-c(...34))
write_csv(dbtrans, "MovementDatabaseExtensive.csv") #Still have some cases (8000) with no body masses, will need additional trait databases
dbna <- filter(dbtrans, is.na(`Body mass`))
count(dbna, Taxon)
count(dbna, Taxon, Species)
View(dbna)
View(dbna)
count(dbna, Taxon, `Species ID`)
count(dbna, Taxon)
bird<- filter(dbna, Taxon == "Bird")
dispersalDB <- dbtrans |>
filter(`Movement type` == "Dispersal")
write_csv(dispersalDB, "DispersalUntransformed.csv")
library(tidyverse)
library(dplyr)
setwd('C:/Users/xr49abiw/Documents/DispersalProject/data')
db <- read.csv("DispersalUntransformed.csv")
####Figuring out data gaps####
count(db, is.na(Body.mass)) # Na = 1216 dp
dbna <- filter(db, is.na(Body.mass))
dbnasp<- count(dbna, Taxon, Species_ID_gbif)#Amphibian (149), bird (2), fish (881), invertebrate (116), mammal(68), reptile (17)
dbna |>
pull(Species_ID_gbif) |>
n_distinct()
dbnasp<- count(dbna, Taxon, Species_ID_gbif)#Amphibian (149), bird (2), fish (881), invertebrate (116), mammal(68), reptile (17)
dnasp
dbnasp
dbna |>
pull(Species_ID_gbif) |>
n_distinct()
dbnasp<- count(dbna, Taxon)#Amphibian (149), bird (2), fish (881), invertebrate (116), mammal(68), reptile (17)
dbnasp
####Figuring out data gaps####
count(db, is.na(Body.mass)) # Na = 582 dp
dbna <- filter(db, is.na(Body.mass))
dbnasp<- count(dbna, Taxon)#Amphibian (149), bird (2), fish (247), invertebrate (116), mammal(68)
dbna |>
pull(Species_ID_gbif) |>
n_distinct()
####Tidying up the data####
#Remove rows with missing, zero, or infinite values for dispersal distance and body mass
db1 <- db |>
filter(
!is.na(Value),
!is.infinite(Value),
Value != 0,          # Remove rows with Value equal to 0
!is.na(Body.mass),
!is.infinite(Body.mass),
Body.mass > 0
)
#converting units to meters
# Conversion factors
conversion_factors <- data.frame(
unit = c("ha", "km", "miles"),
factor = c(10000, 1000, 1609.34)
)
db2 <- db1 |>
left_join(conversion_factors, by = c("Units" = "unit")) |>
mutate(
Value = case_when(
!is.na(Value) & Units == "km/h" ~ Value * (1000 / 3600), # Convert km/h to m/h
!is.na(Value) & Units %in% c("ha", "km", "miles") ~ Value * factor, # Convert ha, km, miles to m
TRUE ~ Value
),
Unit = case_when(
!is.na(Value) & Units == "km/h" ~ "m/h", # Change unit for km/h to m/h
!is.na(Value) & Units %in% c("ha", "km", "miles") ~ "m", # Change unit for ha, km, miles to m
TRUE ~ Units
)
) |>
relocate(Unit, .after = `Value`) |>
select(-Units, -factor)
#converting trait database body mass values
# Conversion factors
conversion_factors1 <- data.frame(
unit = c("kg", "log(10)g"),
factor = c(1000, 1) # Conversion to grams
)
db3 <- db2 |>
left_join(conversion_factors1, by = c("Body.mass.database.Unit" = "unit")) |>
mutate(
Body.mass = case_when(
Body.mass.database.Unit %in% c("kg", "log(10)g") & !is.na(Body.mass) ~ Body.mass * factor,
TRUE ~ Body.mass
),
Body.mass.db.Unit.convert = case_when(
Body.mass.database.Unit %in% c("kg", "log(10)g") ~ "g",
TRUE ~ Body.mass.database.Unit
)
) |>
relocate(Body.mass.db.Unit.convert, .after = Body.mass.Units) |>
select(-Body.mass.database.Unit, -factor)
#Converting movement database body mass values
# Conversion factor for kg to g
conversion_factor_kg_to_g <- 1000
db4 <- db3 |>
mutate(
Body.mass = case_when(
Body.mass.Units == "kg" & !is.na(Body.mass) ~ Body.mass * conversion_factor_kg_to_g,
TRUE ~ Body.mass
),
Body.mass.Units.convert = case_when(
Body.mass.Units == "kg" ~ "g",
TRUE ~ Body.mass.Units
)
) |>
relocate(Body.mass.Units.convert, .after = Body.mass.Units) |>
select(-Body.mass.Units)
#Further filtering
#Removing m/h so we just have m - this removes all the Reptile data (n = 17)
db5 <- db4 |>
filter(Unit != "m/h")
write_csv(db5, "DispersalTransformed.csv")
View(db5)
View(db5)
