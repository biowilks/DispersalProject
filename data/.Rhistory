energy_result <- energy(4500, "swimming", disp_dist, 0.1)
if (!is.null(energy_result)) {
ds.energyswim <- rbind(ds.energyswim, energy_result)
}
}
##plotting energy remaining against distance for different movement modes
energy <- ggplot(ds.energyrun, aes(x = disp_dist, y = E_R)) +
geom_line(color = "chartreuse4", linewidth = 1) +
scale_x_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::comma, limits=c(0, 10000000))+
theme_minimal() +
geom_hline(yintercept = 0, linewidth = 1) +
geom_line(data = ds.energyfly, aes(x = disp_dist, y = E_R), color = "red", linewidth = 1) +
geom_line(data = ds.energyswim, aes(x = disp_dist, y = E_R), color = "blue", linewidth = 1) +
labs(y = "Energy remaining (J)", x = "Distance (m)")+
ggtitle("") +
theme(
axis.text.x = element_text(size = 25),
axis.text.y = element_text(size = 25),
axis.text = element_text(size = 25),
axis.title = element_text(size = 25),
title = element_text(size = 25, face = "bold"))
energy
##plotting energy remaining against distance for different movement modes
energy <- ggplot(ds.energyrun, aes(x = disp_dist, y = E_R)) +
geom_line(color = "chartreuse4", linewidth = 1) +
scale_x_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::comma, limits=c(0, 10000000000))+
theme_minimal() +
geom_hline(yintercept = 0, linewidth = 1) +
geom_line(data = ds.energyfly, aes(x = disp_dist, y = E_R), color = "red", linewidth = 1) +
geom_line(data = ds.energyswim, aes(x = disp_dist, y = E_R), color = "blue", linewidth = 1) +
labs(y = "Energy remaining (J)", x = "Distance (m)")+
ggtitle("") +
theme(
axis.text.x = element_text(size = 25),
axis.text.y = element_text(size = 25),
axis.text = element_text(size = 25),
axis.title = element_text(size = 25),
title = element_text(size = 25, face = "bold"))
energy
##plotting energy remaining against distance for different movement modes
energy <- ggplot(ds.energyrun, aes(x = disp_dist, y = E_R)) +
geom_line(color = "chartreuse4", linewidth = 1) +
scale_x_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::comma, limits=c(0, 1000000000))+
theme_minimal() +
geom_hline(yintercept = 0, linewidth = 1) +
geom_line(data = ds.energyfly, aes(x = disp_dist, y = E_R), color = "red", linewidth = 1) +
geom_line(data = ds.energyswim, aes(x = disp_dist, y = E_R), color = "blue", linewidth = 1) +
labs(y = "Energy remaining (J)", x = "Distance (m)")+
ggtitle("") +
theme(
axis.text.x = element_text(size = 25),
axis.text.y = element_text(size = 25),
axis.text = element_text(size = 25),
axis.title = element_text(size = 25),
title = element_text(size = 25, face = "bold"))
energy
##plotting energy remaining against distance for different movement modes
energy <- ggplot(ds.energyrun, aes(x = disp_dist, y = E_R)) +
geom_line(color = "chartreuse4", linewidth = 1) +
scale_x_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::comma, limits=c(0, 100000000))+
theme_minimal() +
geom_hline(yintercept = 0, linewidth = 1) +
geom_line(data = ds.energyfly, aes(x = disp_dist, y = E_R), color = "red", linewidth = 1) +
geom_line(data = ds.energyswim, aes(x = disp_dist, y = E_R), color = "blue", linewidth = 1) +
labs(y = "Energy remaining (J)", x = "Distance (m)")+
ggtitle("") +
theme(
axis.text.x = element_text(size = 25),
axis.text.y = element_text(size = 25),
axis.text = element_text(size = 25),
axis.title = element_text(size = 25),
title = element_text(size = 25, face = "bold"))
energy
##plotting energy remaining against distance for different movement modes
energy <- ggplot(ds.energyrun, aes(x = disp_dist, y = E_R)) +
geom_line(color = "chartreuse4", linewidth = 1) +
scale_x_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::comma, limits=c(0, 1000000))+
theme_minimal() +
geom_hline(yintercept = 0, linewidth = 1) +
geom_line(data = ds.energyfly, aes(x = disp_dist, y = E_R), color = "red", linewidth = 1) +
geom_line(data = ds.energyswim, aes(x = disp_dist, y = E_R), color = "blue", linewidth = 1) +
labs(y = "Energy remaining (J)", x = "Distance (m)")+
ggtitle("") +
theme(
axis.text.x = element_text(size = 25),
axis.text.y = element_text(size = 25),
axis.text = element_text(size = 25),
axis.title = element_text(size = 25),
title = element_text(size = 25, face = "bold"))
energy
##plotting energy remaining against distance for different movement modes
energy <- ggplot(ds.energyrun, aes(x = disp_dist, y = E_R)) +
geom_line(color = "chartreuse4", linewidth = 1) +
scale_x_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::comma, limits=c(0, 10000000))+
theme_minimal() +
geom_hline(yintercept = 0, linewidth = 1) +
geom_line(data = ds.energyfly, aes(x = disp_dist, y = E_R), color = "red", linewidth = 1) +
geom_line(data = ds.energyswim, aes(x = disp_dist, y = E_R), color = "blue", linewidth = 1) +
labs(y = "Energy remaining (J)", x = "Distance (m)")+
ggtitle("") +
theme(
axis.text.x = element_text(size = 25),
axis.text.y = element_text(size = 25),
axis.text = element_text(size = 25),
axis.title = element_text(size = 25),
title = element_text(size = 25, face = "bold"))
energy
##plotting energy remaining against distance for different movement modes
energy <- ggplot(ds.energyrun, aes(x = disp_dist, y = E_R)) +
geom_line(color = "chartreuse4", linewidth = 1) +
scale_x_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::comma, limits=c(0, 15000000))+
theme_minimal() +
geom_hline(yintercept = 0, linewidth = 1) +
geom_line(data = ds.energyfly, aes(x = disp_dist, y = E_R), color = "red", linewidth = 1) +
geom_line(data = ds.energyswim, aes(x = disp_dist, y = E_R), color = "blue", linewidth = 1) +
labs(y = "Energy remaining (J)", x = "Distance (m)")+
ggtitle("") +
theme(
axis.text.x = element_text(size = 25),
axis.text.y = element_text(size = 25),
axis.text = element_text(size = 25),
axis.title = element_text(size = 25),
title = element_text(size = 25, face = "bold"))
energy
###FIGURE 3a####
# Calculate energy  across different distances (for 2kg  individual)
# create dataframes
ds.energyrun <- data.frame()
ds.energyfly <- data.frame()
ds.energyswim <- data.frame()
# filter to make sure energy remaining is greater than 0
energy <- function(m_C, movement_mode, disp_dist, lambda) {
energy_df <- as.data.frame(energy_fun(m_C, movement_mode, disp_dist, lambda))
if (any(energy_df$E_R < 0)) {
return(NULL)
} else {
return(cbind(disp_dist, energy_df))
}
}
# running
for (disp_dist in seq(0, 5000000, length = 2000)) {
energy_result <- energy(2000, "running", disp_dist, 0.1)
if (!is.null(energy_result)) {
ds.energyrun <- rbind(ds.energyrun, energy_result)
}
}
# flying
for (disp_dist in seq(0, 5000000, length = 2000)) {
energy_result <- energy(2000, "flying", disp_dist, 0.1)
if (!is.null(energy_result)) {
ds.energyfly <- rbind(ds.energyfly, energy_result)
}
}
# swimming
for (disp_dist in seq(0, 5000000, length = 2000)) {
energy_result <- energy(2000, "swimming", disp_dist, 0.1)
if (!is.null(energy_result)) {
ds.energyswim <- rbind(ds.energyswim, energy_result)
}
}
##plotting energy remaining against distance for different movement modes
energy <- ggplot(ds.energyrun, aes(x = disp_dist, y = E_R)) +
geom_line(color = "chartreuse4", linewidth = 1) +
scale_x_continuous(labels = scales::comma)+
scale_y_continuous(labels = scales::comma, limits=c(0, 10000000))+
theme_minimal() +
geom_hline(yintercept = 0, linewidth = 1) +
geom_line(data = ds.energyfly, aes(x = disp_dist, y = E_R), color = "red", linewidth = 1) +
geom_line(data = ds.energyswim, aes(x = disp_dist, y = E_R), color = "blue", linewidth = 1) +
labs(y = "Energy remaining (J)", x = "Distance (m)")+
ggtitle("") +
theme(
axis.text.x = element_text(size = 25),
axis.text.y = element_text(size = 25),
axis.text = element_text(size = 25),
axis.title = element_text(size = 25),
title = element_text(size = 25, face = "bold"))
energy
energy_fun(m_C = 10000, movement_mode = "running", disp_dist = 150000.0, lambda = 0)
energy_fun(m_C = 45000, movement_mode = "running", disp_dist = 150000.0, lambda = 0)
1-0.6558356
energy_fun(m_C = 4000000, movement_mode = "running", disp_dist = 150000.0, lambda = 0)
1-0.9287189
0.0712811*100
0.3441644*100
citation()
library('workflowr')
### Building website ###
wflow_build()
wflow_view()
wflow_view()
### Building website ###
wflow_build()
### Building website ###
wflow_build()
### Building website ###
wflow_build()
### Building website ###
wflow_build()
### Building website after making edits in .Rmd files###
wflow_build()
### Building website after making edits in .Rmd files###
wflow_build()
### Building website after making edits in .Rmd files###
wflow_build()
### Building website after making edits in .Rmd files###
wflow_build()
### Building website after making edits in .Rmd files###
wflow_build()
wflow_status()
wflow_git_commit()
wflow_git_commit(all = TRUE)
wflow_status()
wflow_publish()
wflow_publish(c("analysis/index.Rmd", "analysis/about.Rmd", "analysis/license.Rmd"),
"Publish the initial files for myproject")
wflow_publish(c("analysis/index.Rmd", "analysis/about.Rmd", "analysis/license.Rmd"))
wflow_publish(c("C:/Users/xr49abiw/Documents/Energy-Budget-Model/analysis/index.Rmd",
"C:/Users/xr49abiw/Documents/Energy-Budget-Model/analysis/about.Rmd",
"C:/Users/xr49abiw/Documents/Energy-Budget-Model/analysis/license.Rmd"))
#### Publishing website publicly ####
wflow_use_github(
directory = "C:/Users/xr49abiw/Documents/Energy-Budget-Model",
name = NULL,
git = FALSE,
existing = TRUE,
overwrite = FALSE,
change_wd = TRUE,
disable_remote = FALSE,
dry_run = FALSE,
user.name = NULL,
user.email = NULL
)
#### Publishing website publicly ####
wflow_use_github("biowilks")
wflow_git_push()
#### Publishing website publicly ####
wflow_use_github("biowilks")
#### Publishing website publicly ####
wflow_git_remote(
remote = "origin",
user = "biowilks",
repo = "Energy-Budget-Model"
)
#### Publishing website publicly ####
wflow_git_remote(
remote = "origin",
user = "biowilks",
repo = "Energy-Budget-Model"
)
wflow_use_github("biowilks", repository = "Energy-Budget-Model")
#### Publishing website publicly ####
wflow_git_remote(
remote = "origin",
user = "biowilks",
repo = "Energy-Budget-Model",
action = "set_url"
)
wflow_use_github("biowilks", repository = "Energy-Budget-Model")
Run wflow_git_push()
wflow_git_push()
wflow_git_push()
rm(list=ls())
# Load all packages ----------
library('workflowr')
#### Configure Git settings for workflowr project ----------
wflow_git_config(user.name = "biowilks", user.email = "biowilks@gmail.com")
# Publish changes in the workflowr project
wflow_publish()
# Publish and push the website to GitHub
wflow_publish("analysis/*.Rmd", "Editing Energy Budget Model website")
# Configure the Git remote for publishing the website ----------
wflow_git_remote(
remote = "origin",
user = "biowilks",
repo = "Energy-Budget-Model",
action = "set_url"
)
# Publish and push the website to GitHub
wflow_publish("analysis/*.Rmd", "Editing Energy Budget Model website")
# Publish and push the website to GitHub
wflow_publish()
# Publish and push the website to GitHub
wflow_publish("analysis/index.Rmd", "Editing Energy Budget Model website")
wflow_git_push()
?rgbif
# Load all packages ----------
library(tidyverse)
library(rgbif)
?first.pass
?namekey
?nameKey
# Load packages ----------
library("tidyverse")
library("viridis")
library("rstudioapi")
library("scales")
# Import dispersal function and empirical data----------
setwd("~/Energy-Budget-Model/code")
source("6-disp-function.R")
setwd('~/Energy-Budget-Model/output')
dispdata <- read.csv("DispersalTransformed.csv")
#   Removing NA, NaN and Inf values
dispdatamax <- dispdata |>
filter(!is.na(Value) & !is.infinite(Value) & !is.nan(Value),
!is.na(Body.mass) & !is.infinite(Body.mass) & !is.nan(Body.mass),
!is.na(Locomotion.mode) )
rm(list=ls())
setwd("~/Energy-Budget-Model/data")
# Load all packages ----------
library(tidyverse)
library(rgbif)
# Import trait datasets ----------
db <- read.csv("DispersalUntransformed.csv")|>
filter(Statistic == "Maximum")
db <- read.csv("DispersalUntransformed.csv")
# Import trait datasets ----------
db <- read.csv("DispersalUntransformed.csv")|>
filter(Statistic == "Maximum")
db <- read.csv("DispersalUntransformed.csv")
# Import trait datasets ----------
db <- read.csv("DispersalUntransformed.csv")|>
filter(Statistic == "Maximum")
# Wilman2014 - EltonTraits
eltonbird<-read_tsv('BirdFuncDat.txt')
eltonmam<-read_tsv('MamFuncDat.txt')
# Boettiger2023 - FishBase
fb <-read_tsv('FishBase.txt')
# Boettiger2023 - SeaLifeBase
slb <-read_tsv('SealifeBase.txt')
# Herberstein2022
anidat<-read_tsv('AnimalTraits.txt')
# 1) Data harmonisation ----------
# extract species names
setdiff(c('a', 'b', 'c'), c('a', 'b')) #find the differences between the the two sets
res <- bind_rows(
db |>
transmute(species = `Species.ID`, db = 'dispdb') |>
distinct_all(),
eltonbird |>
transmute(species = Scientific, db = 'eltonbirds') |>
distinct_all(),
eltonmam |>
transmute(species = Scientific, db = 'eltonmamm') |>
distinct_all(),
fb |>
transmute(species = Species, db = 'FishBase') |>
distinct_all(),
slb |>
transmute(species = Species, db = 'SeaLifeBase') |>
distinct_all(),
anidat |>
transmute(species = species, db = 'AnimalTraits') |>
distinct_all()
)
# Harmonisation using rgbif
checklist <- res |>
mutate(species = gsub('[?]', '', species)) |>
filter(validUTF8(species))
chunksize <- 1e3 #limit is 1e3
res <- as.list(rep(NA, ceiling( nrow(checklist) / chunksize )))
for (i in seq_along(res)) {
### TO DO name_parse, if it fails there are issue with the name, try delete everything after second word.
message(i)
start <- chunksize * (i - 1) + 1
end <- min(start + chunksize - 1, nrow(checklist))
sp <- checklist[["species"]][start:end] #species to check
db <- checklist[["db"]][start:end] #database source to append at the end
first.pass <- name_backbone_checklist(sp) #get taxonomy from gbif
synonyms <- first.pass |>
mutate(status = ifelse(is.na(status), "NOT FOUND", status)) |>
filter(status != 'ACCEPTED') #select only synonyms
keys <- sapply(synonyms[["canonicalName"]], function(x) {
if (is.na(x)) {
return (NA)
} else {
return (name_backbone(x)$usageKey)
}
}, USE.NAMES = FALSE) #get synonyms keys
second.pass <- lapply(keys, function(x) {
if (is.na(x)) {
column_names <- c('key','scientificName','nubKey','nameKey','taxonID','sourceTaxonKey','kingdom','phylum','order','family','genus','species','kingdomKey','phylumKey','classKey','orderKey','familyKey','genusKey','speciesKey','datasetKey','constituentKey','parentKey','parent','acceptedKey','accepted','basionymKey','basionym','canonicalName','vernacularName','authorship','nameType','rank','origin','taxonomicStatus','nomenclaturalStatus','remarks','numDescendants','lastCrawled','lastInterpreted','issues','synonym','class')
ans <- as.list(rep(NA, length(column_names)))
names(ans) <- column_names
ans <- ans |> as_tibble()
return (ans)
} else {
return (name_usage(x)$data) #deeper search of synonyms
}
}) |>
bind_rows() |>
mutate(status = taxonomicStatus,
acceptedUsageKey = key)
# combine back together
second.pass.sp <- first.pass |> #species that go to second.pass
rownames_to_column() |>
mutate(status = ifelse(is.na(status), "NOT FOUND", status)) |>
filter(status != 'ACCEPTED') |>
pull(rowname) |>
as.integer()
stopifnot (length(second.pass.sp) == nrow(second.pass))
res[[i]] <- first.pass |>
mutate(original = sp, db = db) |>
filter(status == "ACCEPTED") |>
bind_rows(second.pass |>
mutate(original = sp[second.pass.sp], db = db[second.pass.sp])) |>
transmute(
db,
original,
gbif.binomial = canonicalName,
gbif.key = usageKey,
rank,
status,
matchType,
phylum,
class,
family,
genus,
species,
)
}
# overview of taxonomy and match type from rgbif
overviewtaxa <- res
# Making the Body.mass column 'NA' if an empty cell
db1 <- db |>
mutate_at(vars(Body.mass), ~ifelse(. == "", NA, .))
# 2) Adding body mass ----------
db <- read.csv("DispersalUntransformed.csv")|>
filter(Statistic == "Maximum")
# Making the Body.mass column 'NA' if an empty cell
db1 <- db |>
mutate_at(vars(Body.mass), ~ifelse(. == "", NA, .))
# Left join body mass data by gbif.binomial
birds <- eltonbird |>
transmute(
original = Scientific,
mass = `BodyMass-Value`
) |>
drop_na() |>
distinct_all() |>
left_join(res, by = "original") |>
group_by(gbif.binomial) |>
summarize(birdmass = mean(mass), .groups = "drop")
sealife <- slb |>
transmute(
original = Species,
mass = `Weight`
) |>
drop_na() |>
distinct_all() |>
left_join(res, by = "original") |>
group_by(gbif.binomial) |>
summarize(seamass = mean(mass), .groups = "drop")
# Left join by taxonomy, adding in trait refs to the body mass source column
db2 <- db1 |>
left_join(res, by = c(Species.ID = "original"), relationship = "many-to-many") |>
mutate(
Body.mass.source = case_when (!is.na(Body.mass)&!is.na(Body.mass.ref) ~ MetaRef,
!is.na(Body.mass)&is.na(Body.mass.ref) ~ MetaRef, T ~ "databases")
)
traits <- db2 |>
filter(Body.mass.source == "databases")
# Filtering columns
db2 <- db2|>
select(-gbif.key,-rank,-status,-matchType,-phylum,-genus,-species)|>
rename('Species.ID.reported' = 'Species.ID')|>
relocate(gbif.binomial,.before = Movement.type)|>
relocate(class,.before = Movement.type)|>
relocate(family,.before = Movement.type)
# Left join by taxonomy, adding in trait refs to the body mass source column
db2 <- db1 |>
left_join(res, by = c(Species.ID = "original"), relationship = "many-to-many") |>
mutate(
Body.mass.source = case_when (!is.na(Body.mass)&!is.na(Body.mass.ref) ~ MetaRef,
!is.na(Body.mass)&is.na(Body.mass.ref) ~ MetaRef, T ~ "databases")
)
# 2) Adding body mass ----------
db <- read.csv("DispersalUntransformed.csv")|>
filter(Statistic == "Maximum")
# Making the Body.mass column 'NA' if an empty cell
db1 <- db |>
mutate_at(vars(Body.mass), ~ifelse(. == "", NA, .))
# Left join body mass data by gbif.binomial
birds <- eltonbird |>
transmute(
original = Scientific,
mass = `BodyMass-Value`
) |>
drop_na() |>
distinct_all() |>
left_join(res, by = "original") |>
group_by(gbif.binomial) |>
summarize(birdmass = mean(mass), .groups = "drop")
# Left join body mass data by gbif.binomial
birds <- eltonbird |>
transmute(
original = Scientific,
mass = `BodyMass-Value`
) |>
drop_na() |>
distinct_all() |>
left_join(res, by = "original") |>
group_by(gbif.binomial) |>
summarize(birdmass = mean(mass), .groups = "drop")
res <- as.data.frame(res)
