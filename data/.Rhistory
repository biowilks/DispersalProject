`Movement Mode` = ifelse(is.na(`Movement Mode`), `Movement.Mode`, `Movement Mode`)
)
tmovmod_data <- tmovmod_data |>
mutate(`Movement Mode Ref` = ifelse(is.na(`Movement Mode`), NA, `MoveModeRef`)
) |>
select(-`Movement Mode`, -'MoveModeRef')
# Step 3: Infer movement modes from class_gbif
na_movement_data <- tmovmod_data |>
filter(is.na(`Movement.Mode`))
na_movement_data <- na_movement_data |> mutate(`Movement Mode Ref` = NA)
#find class to search for the next step
unique(na_movement_data$Class_gbif)
# Adding movement type based on class - google/wikipedia search
na_movement_data <- na_movement_data |>
mutate(`Movement.Mode` = case_when(
Class_gbif %in% c("Mammalia", "Squamata", "Crocodylia") ~ "Running",
Class_gbif == "Aves" ~ "Flying",
Class_gbif %in% c("Amphibia", "Testudines", "Arachnida") ~ "Mixed",
Class_gbif %in% c("Malacostraca", "Elasmobranchii", "Holocephali") ~ "Swimming",
TRUE ~ `Movement.Mode`
)) |>
mutate(
`Movement Mode Ref` = ifelse(!is.na(`Movement.Mode`), paste("Inferred from Class: ", Class_gbif), `Movement Mode Ref`)
)
#Adding movement type based on family
na_movement_data <- na_movement_data |>
mutate(`Movement.Mode` = case_when(
Family_gbif %in% c("Acipenseridae", "Alestidae", "Anguillidae","Anostomidae","Bryconidae","Catostomidae","Centrarchidae","Cichlidae","Clupeidae","Cottidae","Cyprinidae","Doradidae","Esocidae","Fundulidae","Galaxiidae","Ictaluridae","Lepisosteidae","Lotidae","Moronidae","Nemacheilidae","Percichthyidae","Percidae","Pimelodidae","Poeciliidae","Polyodontidae","Prochilodontidae","Rivulidae","Salmonidae","Sciaenidae","Serrasalmidae") ~ "Swimming",
TRUE ~ `Movement.Mode`
)) |>
mutate(
`Movement Mode Ref` = ifelse(is.na(`Class_gbif`), paste("Inferred from Family: ", Family_gbif), `Movement Mode Ref`)
)
na_movement_data <- na_movement_data |>
mutate(`Movement Mode Ref` = ifelse(is.na(`Movement.Mode`), NA, `Movement Mode Ref`))
# Step 4: Full join all movement mode data
combined_movdata <- full_join(tmovmod_data, na_movement_data, by = "Species_ID_gbif")
combined_movdata <- combined_movdata |>
mutate(
`Movement Mode` = coalesce(`Movement.Mode.x`, `Movement.Mode.y`),
MetaRef = coalesce(`Movement Mode Ref.x`, `Movement Mode Ref.y`)
) |>
select(-`Movement.Mode.x`, -`Movement.Mode.y`, -`Movement Mode Ref.x`, -`Movement Mode Ref.y`, -`Class_gbif.y`)
View(combined_movdata)
View(combined_movdata)
#Making references NA if no movement mode and deleting unnecessary columns and only keeping one row per species
combined_movdata <- combined_movdata |>
mutate(`Movement Mode Ref` = ifelse(is.na(`Movement Mode`), NA, `MetaRef`)) |>
distinct(Species_ID_gbif, .keep_all = TRUE) |>
select(-`MetaRef`, -`Class_gbif.x`)
# Left join the processed movement data to the full dataset
full_dataset <- dbtrans |>
left_join(combined_movdata, by = "Species_ID_gbif")
View(full_dataset)
#rearranging dataset
full_dataset <- full_dataset |>
relocate(`Movement Mode Ref`, .after = `Body Mass Ref`) |>
relocate(`Movement Mode.y`, .after = `Inference method`)|>
rename(`Movement Mode` = `Movement Mode.y`) |>
select(-`Movement Mode.x`,`Family_gbif.x`,`Family_gbif.y`)
write_csv(full_dataset, "MovementDatabaseExtensive.csv")
#Extracting data for dispersal project
dispersalDB <- full_dataset |>
filter(`Movement type` == "Dispersal")
write_csv(dispersalDB, "DispersalUntransformed.csv")
#Save in other project location
setwd('C:/Users/xr49abiw/Documents/DispersalProject/data')
write_csv(dispersalDB, "DispersalUntransformed.csv")
#rearranging dataset
full_dataset <- full_dataset |>
relocate(`Movement Mode Ref`, .after = `Body Mass Ref`) |>
relocate(`Movement Mode.y`, .after = `Inference method`)|>
rename(`Movement Mode` = `Movement Mode.y`) |>
select(-`Movement Mode.x`,`Family_gbif.x`,`Family_gbif.y`)
# Left join the processed movement data to the full dataset
full_dataset <- dbtrans |>
left_join(combined_movdata, by = "Species_ID_gbif")
#rearranging dataset
full_dataset <- full_dataset |>
relocate(`Movement Mode Ref`, .after = `Body Mass Ref`) |>
relocate(`Movement Mode.y`, .after = `Inference method`)|>
rename(`Movement Mode` = `Movement Mode.y`) |>
select(-`Movement Mode.x`,-`Family_gbif.x`,-`Family_gbif.y`)
setwd('C:/Users/xr49abiw/Documents/MovementDatabase/data')
#rearranging dataset
full_dataset <- full_dataset |>
relocate(`Movement Mode Ref`, .after = `Body Mass Ref`) |>
relocate(`Movement Mode.y`, .after = `Inference method`)|>
rename(`Movement Mode` = `Movement Mode.y`) |>
select(-`Movement Mode.x`,-`Family_gbif.x`,-`Family_gbif.y`)
View(full_dataset)
write_csv(full_dataset, "MovementDatabaseExtensive.csv")
#Extracting data for dispersal project
dispersalDB <- full_dataset |>
filter(`Movement type` == "Dispersal")
write_csv(dispersalDB, "DispersalUntransformed.csv")
#Save in other project location
setwd('C:/Users/xr49abiw/Documents/DispersalProject/data')
write_csv(dispersalDB, "DispersalUntransformed.csv")
library(tidyverse)
library(dplyr)
setwd('C:/Users/xr49abiw/Documents/DispersalProject/data')
db <- read.csv("DispersalUntransformed.csv")
setwd('C:/Users/xr49abiw/Documents/DispersalProject/data')
db <- read.csv("DispersalUntransformed.csv")
####Summarising data####
result <- db |>
group_by(Class_gbif) |>
summarize(
na_count = sum(is.na(Body.mass)),
total_count = n(),
proportion_available = 1 - sum(is.na(Body.mass)) / total_count
)
total_result <- result|>
summarise(
Taxon = "Total",
na_count = sum(na_count),
total_count = sum(total_count),
proportion_available = sum(total_count - na_count) / sum(total_count)
)
final_result <- bind_rows(result, total_result)
print(final_result)
#counting data
db |>
pull(`Class_gbif`) |>
n_distinct()
####Tidying up the data####
#converting units to meters
# Conversion factors
conversion_factors <- data.frame(
unit = c("ha", "km", "miles"),
factor = c(10000, 1000, 1609.34)
)
db1 <- db |>
left_join(conversion_factors, by = c("Units" = "unit")) |>
mutate(
Value = case_when(
!is.na(Value) & Units == "km/h" ~ Value * (1000 / 3600), # Convert km/h to m/h
!is.na(Value) & Units %in% c("ha", "km", "miles") ~ Value * factor, # Convert ha, km, miles to m
TRUE ~ Value
),
Unit = case_when(
!is.na(Value) & Units == "km/h" ~ "m/h", # Change unit for km/h to m/h
!is.na(Value) & Units %in% c("ha", "km", "miles") ~ "m", # Change unit for ha, km, miles to m
TRUE ~ Units
)
) |>
relocate(Unit, .after = `Value`) |>
select(-Units, -factor)
#converting trait database body mass values
# Conversion factors
conversion_factors1 <- data.frame(
unit = c("kg", "log(10)g"),
factor = c(1000, 1) # Conversion to grams
)
db2 <- db1 |>
left_join(conversion_factors1, by = c("Body.mass.database.Unit" = "unit")) |>
mutate(
Body.mass = case_when(
Body.mass.database.Unit %in% c("kg", "log(10)g") & !is.na(Body.mass) ~ Body.mass * factor,
TRUE ~ Body.mass
),
Body.mass.db.Unit.convert = case_when(
Body.mass.database.Unit %in% c("kg", "log(10)g") ~ "g",
TRUE ~ Body.mass.database.Unit
)
) |>
relocate(Body.mass.db.Unit.convert, .after = Body.mass.Units) |>
select(-Body.mass.database.Unit, -factor)
#Converting movement database body mass values
# Conversion factor for kg to g
conversion_factor_kg_to_g <- 1000
db3 <- db2 |>
mutate(
Body.mass = case_when(
Body.mass.Units == "kg" & !is.na(Body.mass) ~ Body.mass * conversion_factor_kg_to_g,
TRUE ~ Body.mass
),
Body.mass.Units.convert = case_when(
Body.mass.Units == "kg" ~ "g",
TRUE ~ Body.mass.Units
)
) |>
relocate(Body.mass.Units.convert, .after = Body.mass.Units) |>
select(-Body.mass.Units)
#Further filtering
#Removing m/h so we just have m - this removes all the Reptile data (n = 17)
#Remove rows with missing, zero, or infinite values for dispersal distance and body mass
db4 <- db3 |>
filter(Unit != "m/h") |>
select(-Body.mass.Units.convert, Body.mass.unit = Body.mass.db.Unit.convert) |>
filter(
!is.na(Value),
!is.infinite(Value),
Value != 0,          # Remove rows with Value equal to 0
!is.na(Body.mass),
!is.infinite(Body.mass),
Body.mass > 0
)
write_csv(db4, "DispersalTransformed.csv")
db5 <- read.csv("DispersalTransformed.csv")
# Filtering for mean, median, and maximum distances
meandb <- filter(db5, Statistic == "Mean")
meddb <- filter(db5, Statistic == "Median")
maxdb <- filter(db5, Statistic == "Maximum")
#### Linear regression for maximum by movement modes####
# Filtering for maximum distances and grouping by Movement Mode
maxmovdb <- filter(db5, Statistic == "Maximum") |>
group_by(Movement.Mode)
maxmovdb <- maxmovdb |>
filter(!is.na(Movement.Mode))
#### Linear regression for maximum (differentiated by Movement Mode) ####
# Log10 transform
maxmovdb <- maxmovdb |>
mutate(log10_Body.mass = log10(Body.mass),
log10_Distance = log10(Value))
# Linear regression model for each Movement Mode and extracting the slopes (coefficients)
regressions_maxmov <- maxmovdb |>
group_by(Movement.Mode) |>
do(model = lm(log10_Distance ~ log10_Body.mass, data = .))
# Summarize the regression models
summaries <- regressions_maxmov |>
group_map(~ summary(.x$model))
# Create scatter plots for each Movement Mode
scatter_plots_maxmov <- maxmovdb |>
ggplot(aes(x = log10_Body.mass, y = log10_Distance, color = Movement.Mode)) +
geom_point(size = 1, alpha = 0.2) +  # Adjust size and transparency
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Log10 Body mass (g)", y = "Log10 maximum Dispersal distance (m)") +
theme_minimal()
print(scatter_plots_maxmov)
# Create scatter plots for each Movement Mode
scatter_plots_maxmov <- maxmovdb |>
ggplot(aes(x = log10_Body.mass, y = log10_Distance, color = Movement.Mode)) +
geom_point(size = 1, alpha = 0.3) +  # Adjust size and transparency
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Log10 Body mass (g)", y = "Log10 maximum Dispersal distance (m)") +
theme_minimal()
####Harmonising data####
#converting units to meters
# Conversion factors
conversion_factors <- data.frame(
unit = c("ha", "km", "miles"),
factor = c(10000, 1000, 1609.34)
)
unique(maxdb$Species_ID_gbif)
View(maxdb)
#summarising data
maxdb <- maxmdb |>
filter(!is.na(Movement.Mode))
#summarising data
maxdb <- maxdb |>
filter(!is.na(Movement.Mode))
View(db)
####Summarising data####
#Body mass coverage for data
Bresult <- db |>
group_by(Class_gbif) |>
summarize(
na_count = sum(is.na(Body.mass)),
total_count = n(),
proportion_available = 1 - sum(is.na(Body.mass)) / total_count
)
Btotal_result <- Bresult|>
summarise(
Taxon = "Total",
na_count = sum(na_count),
total_count = sum(total_count),
proportion_available = sum(total_count - na_count) / sum(total_count)
)
Bfinal_result <- bind_rows(Bresult, Btotal_result)
print(Bfinal_result)
#Movement mode coverage for data
Mresult <- db |>
group_by(Class_gbif) |>
summarize(
na_count = sum(is.na(Movement.Mode)),
total_count = n(),
proportion_available = 1 - sum(is.na(Movement.Mode)) / total_count
)
Mtotal_result <- Bresult|>
summarise(
Taxon = "Total",
na_count = sum(na_count),
total_count = sum(total_count),
proportion_available = sum(total_count - na_count) / sum(total_count)
)
Mfinal_result <- bind_rows(Mresult, Mtotal_result)
print(Bfinal_result)
#counting data
db |>
pull(`Species_ID_gbif`) |>
n_distinct()
#counting data
db |>
pull(`Class_gbif`) |>
n_distinct()
#counting data
db |>
pull(`Family_gbif`) |>
n_distinct()
#counting data
db |>
pull(`MetaRef`) |>
n_distinct()
unique(db$MetaRef)
#counting data
db |>
pull(`Reference`) |>
n_distinct()
#counting data
db |>
pull(`Movement.Mode`) |>
n_distinct()
maxdb |>
pull(`Class_gbif`) |>
n_distinct()
maxdb |>
pull(`Family_gbif`) |>
n_distinct()
maxdb |>
pull(`Species_ID_gbif`) |>
n_distinct()
#summarising data
maxdb <- maxdb |>
filter(!is.na(Movement.Mode))
maxdb |>
pull(`MetaRef`) |>
n_distinct()
#summarising data
maxdb <- maxdb |>
filter(!is.na(Movement.Mode))
maxdb |>
pull(`Reference`) |>
n_distinct()
maxdb |>
pull(`Movement.Mode`) |>
n_distinct()
#### Linear regression for maximum ####
# Log10 transform
log10_Body.mass_max <- log10(maxdb$Body.mass)
log10_Distance_max <- log10(maxdb$Value)
# Linear regression model and extracting the slope (coefficient)
regression_max  <- lm(log10_Distance_max ~ log10_Body.mass_max, data = maxdb)
summary(regression_max)
# Create a scatter plot
scatter_plot_max <- ggplot(maxdb, aes(x = log10_Body.mass_max, y = log10_Distance_max)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(x = "Log10 Body mass (g)", y = "Log10 maximum Dispersal distance (m)") +
theme_minimal()
print(scatter_plot_max)
#### Linear regression for maximum (differentiated by Movement Mode) ####
# Filtering for maximum distances and grouping by Movement Mode
maxmovdb <- filter(db5, Statistic == "Maximum") |>
group_by(Movement.Mode)
maxmovdb <- maxmovdb |>
filter(!is.na(Movement.Mode))
# Log10 transform
maxmovdb <- maxmovdb |>
mutate(log10_Body.mass = log10(Body.mass),
log10_Distance = log10(Value))
# Linear regression model for each Movement Mode and extracting the slopes (coefficients)
regressions_maxmov <- maxmovdb |>
group_by(Movement.Mode) |>
do(model = lm(log10_Distance ~ log10_Body.mass, data = .))
# Summarize the regression models
summaries <- regressions_maxmov |>
group_map(~ summary(.x$model))
# Create scatter plots for each Movement Mode
scatter_plots_maxmov <- maxmovdb |>
ggplot(aes(x = log10_Body.mass, y = log10_Distance, color = Movement.Mode)) +
geom_point(size = 1, alpha = 0.3) +  # Adjust size and transparency
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Log10 Body mass (g)", y = "Log10 maximum Dispersal distance (m)") +
theme_minimal()
print(scatter_plots_maxmov)
maxdB |>
count(`Movement.Mode`)
maxdb |>
count(`Movement.Mode`)
#summarising data for mean
meandb <- meandb |>
filter(!is.na(Movement.Mode))
meandb |>
count(`Movement.Mode`)
meandb |>
pull(`Species_ID_gbif`) |>
n_distinct()
meandb |>
pull(`Class_gbif`) |>
n_distinct()
meandb |>
pull(`Family_gbif`) |>
n_distinct()
meandb |>
pull(`MetaRef`) |>
n_distinct()
meandb |>
pull(`Reference`) |>
n_distinct()
#Summarising data for median
meddb <- meddb |>
filter(!is.na(Movement.Mode))
meddb |>
count(`Movement.Mode`)
meddb |>
pull(`Reference`) |>
n_distinct()
meddb |>
pull(`MetaRef`) |>
n_distinct()
meddb |>
pull(`Class_gbif`) |>
n_distinct()
meddb |>
pull(`Family_gbif`) |>
n_distinct()
meddb |>
pull(`Species_ID_gbif`) |>
n_distinct()
meddb |>
count(`Movement.Mode`)
setwd('C:/Users/xr49abiw/Documents/DispersalProject/data')
db <- read.csv("DispersalUntransformed.csv")
####Summarising data####
#Body mass coverage for data
Bresult <- db |>
group_by(Class_gbif) |>
summarize(
na_count = sum(is.na(Body.mass)),
total_count = n(),
proportion_available = 1 - sum(is.na(Body.mass)) / total_count
)
Btotal_result <- Bresult|>
summarise(
Taxon = "Total",
na_count = sum(na_count),
total_count = sum(total_count),
proportion_available = sum(total_count - na_count) / sum(total_count)
)
Bfinal_result <- bind_rows(Bresult, Btotal_result)
print(Bfinal_result)
#Movement mode coverage for data
Mresult <- db |>
group_by(Class_gbif) |>
summarize(
na_count = sum(is.na(Movement.Mode)),
total_count = n(),
proportion_available = 1 - sum(is.na(Movement.Mode)) / total_count
)
Mtotal_result <- Bresult|>
summarise(
Taxon = "Total",
na_count = sum(na_count),
total_count = sum(total_count),
proportion_available = sum(total_count - na_count) / sum(total_count)
)
Mfinal_result <- bind_rows(Mresult, Mtotal_result)
print(Bfinal_result)
#counting data
db |>
pull(`Movement.Mode`) |>
n_distinct()
unique(db$Movement.Mode)
View(Bresult)
View(Mresult)
View(Bresult)
View(Btotal_result)
View(Mtotal_result)
6790-599
View(Mtotal_result)
View(Bfinal_result)
####Summarising data####
#Body mass coverage for data
Bresult <- db |>
group_by(Class_gbif) |>
summarize(
na_count = sum(is.na(Body.mass)),
total_count = n(),
proportion_available = 1 - sum(is.na(Body.mass)) / total_count
)
Btotal_result <- Bresult|>
summarise(
Class_gbif = "Total",
na_count = sum(na_count),
total_count = sum(total_count),
proportion_available = sum(total_count - na_count) / sum(total_count)
)
Bfinal_result <- bind_rows(Bresult, Btotal_result)
print(Bfinal_result)
#Movement mode coverage for data
Mresult <- db |>
group_by(Class_gbif) |>
summarize(
na_count = sum(is.na(Movement.Mode)),
total_count = n(),
proportion_available = 1 - sum(is.na(Movement.Mode)) / total_count
)
Mtotal_result <- Bresult|>
summarise(
Class_gbif = "Total",
na_count = sum(na_count),
total_count = sum(total_count),
proportion_available = sum(total_count - na_count) / sum(total_count)
)
Mfinal_result <- bind_rows(Mresult, Mtotal_result)
print(Bfinal_result)
Mfinal_result <- bind_rows(Mresult, Mtotal_result)
print(Mfinal_result)
View(Mfinal_result)
View(Bfinal_result)
