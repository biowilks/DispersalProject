c = 0.27
d = 0.24
k = 0.033
v_C = (((1/k)*m_C_kg^c)/((m_C_kg^(c+d)) + (1/(k*v_0))))*3600
#  Parameter reference:
#  All movement modes from Dyer et al. (2023)
#  Given in m/s, converted to m/h, body mass in kg
## C) Energy loss via dispersal
if(movement_mode == "running") {
BMR = (3.248*m_C^0.735)*20 } else if (movement_mode == "flying"){
BMR = (7.434*m_C^0.648)*20 } else {BMR = (((10^1.87)*m_C_kg^0.95)/1.33)*20 }
#  Parameter reference:
#  Mammal (running) and
#  Bird (flying)    BMR from (Gavrilov et al. 2022)
#                   Given in mL o2/h, body mass in g, converted to J/h
#                   Conversion factor taken from Peters. (1986)
#  Fish (swimming) BMR from (Watanabe & Payne. 2023)
#                   Given in mg o2/h, body mass in kg, converted to J/h
#                   Conversion factor taken from Peters. (1986)
if(movement_mode == "running") {
COT = 10.7*m_C_kg^0.68 } else if (movement_mode == "flying"){
COT = 3.6*m_C_kg^0.69 } else {COT = 1.1*m_C_kg^0.62}
#  Parameter reference:
#  All movement modes from Alexander. (2003) in J/m, body mass in kg
FMR_disp = BMR + COT*v_C
# TOOK THIS OUT FOR NOW: Factor of 1.2 accounts for the additional cost of lifting body from the ground - Peters. (1993)
## D) Energy storage
if(movement_mode == "running") {
E_0 =  (((10^-1.30)*m_C^1)/1000)*40*10^6  } else if (movement_mode == "flying"){
E_0 =  (((10^-1.20)*m_C^0.98)/1000)*40*10^6 } else {E_0 = ((10^0.62)*m_C^0.02)*m_C*1000 }
# Parameter reference:
# Mammal (running) and
# Bird (flying)   E_0 from Antol & Kozlowski. (2020)
#                 Gives energy in log10 g converted to kg and then J
#                 Conversion factor from Peters. (1986)
# Fish (swimming) E_0 calculated using data from Martin et al. (2018)
#                 Refitted energy density/length data, converting length to mass
#                 Gives energy density in kJ/g converted to J
#                 Conversion factor from Webb. (1975) in Peters. (1986)
## Calculate time in h
t = ((1-lambda) * E_0 )/ FMR_disp
## Calculate dispersal distance in m
disp_dist = (t*v_C)
ds.disp <- cbind(m_C_kg, E_0, v_C, t, FMR_disp, disp_dist, BMR, COT,lambda)
return(ds.disp)
}
disp_fun(m_C = 20000,movement_mode = "running", lambda = 0.1)
# Calculate dispersal distances across body mass gradient (mass values based on empirical data available)
# For each movement mode
ds.disprun  <- data.frame()
for(m_C in seq(7.6,3940034.28
, length = 100)) {
disp = as.data.frame(disp_fun(m_C,movement_mode = "running",lambda = 0.1))
mass_disp = cbind(m_C, disp)
ds.disprun = rbind(ds.disprun, mass_disp)
}
ds.dispfly  <- data.frame()
for(m_C in seq(3.1,11800
, length = 100)) {
disp = as.data.frame(disp_fun(m_C,movement_mode = "flying",lambda = 0.1))
mass_disp = cbind(m_C, disp)
ds.dispfly = rbind(ds.dispfly, mass_disp)
}
ds.dispswim  <- data.frame()
for(m_C in seq(220, 550000, length = 100)) {
disp = as.data.frame(disp_fun(m_C,movement_mode = "swimming",lambda = 0.1))
mass_disp = cbind(m_C, disp)
ds.dispswim = rbind(ds.dispswim, mass_disp)
}
# Plot dispersal distance against body mass
ggplot(ds.disprun, aes(x=m_C, y = disp_dist)) +
geom_line() +
scale_x_log10(labels = scales::trans_format("log10", scales::math_format(10^.x))) +
scale_y_log10(labels = scales::trans_format("log10", scales::math_format(10^.x))) +
theme_minimal() +
geom_line(data = ds.disprun,aes(x=m_C, y = disp_dist),color = "chartreuse4",linewidth=1)+
geom_line(data = ds.dispfly,aes(x=m_C, y = disp_dist),color = "red",linewidth=1)+
geom_line(data = ds.dispswim,aes(x=m_C, y = disp_dist),color = "blue",linewidth=1)+
labs(y= "Dispersal distance (m)", x = "Body size (g)")
# Model summary for each movement mode
model.disprun <- lm(log10(disp_dist) ~ log10(m_C), data = ds.disprun)
summary(model.disprun)
model.dispfly <- lm(log10(disp_dist) ~ log10(m_C), data = ds.dispfly)
summary(model.dispfly)
model.dispswim <- lm(log10(disp_dist) ~ log10(m_C), data = ds.dispswim)
summary(model.dispswim)
## Plot parameters against body mass
#custom label needed for speed graph
custom_labels <- c(expression(10^2.5), expression(10^3), expression(10^3.5), expression(10^4), expression(10^4.5))
custom_breaks <- c(10^2.5, 10^3, 10^3.5, 10^4, 10^4.5)
vC_plot <- ggplot(ds.disprun, aes(x = m_C, y = v_C)) +
geom_line() +
scale_x_log10(labels = scales::trans_format("log10", scales::math_format(10^.x))) +
scale_y_continuous(breaks = custom_breaks, labels = custom_labels, trans = "log10") +
theme_minimal() +
geom_line(data = ds.disprun, aes(x = m_C, y = v_C), color = "chartreuse4", linewidth = 1) +
geom_line(data = ds.dispfly, aes(x = m_C, y = v_C), color = "red", linewidth = 1) +
geom_line(data = ds.dispswim, aes(x = m_C, y = v_C), color = "blue", linewidth = 1) +
labs(y = "Movement speed (m/h)", x = "Body size (g)") +
theme(axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"))
BMR_plot <- ggplot(ds.disprun, aes(x=m_C, y = BMR)) +
geom_line() +
scale_x_log10(labels = scales::trans_format("log10", scales::math_format(10^.x))) +
scale_y_log10(labels = scales::trans_format("log10", scales::math_format(10^.x))) +
theme_minimal() +
geom_line(data = ds.disprun,aes(x=m_C, y = BMR),color = "chartreuse4",linewidth=1)+
geom_line(data = ds.dispfly,aes(x=m_C, y = BMR),color = "red",linewidth=1)+
geom_line(data = ds.dispswim,aes(x=m_C, y = BMR),color = "blue",linewidth=1)+
labs(y= "Basal metabolic rate (J/h)", x = "Body size (g)")+
theme(axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"))
COT_plot <- ggplot(ds.disprun, aes(x=m_C, y = COT)) +
geom_line() +
scale_x_log10(labels = scales::trans_format("log10", scales::math_format(10^.x))) +
scale_y_log10(labels = scales::trans_format("log10", scales::math_format(10^.x))) +
theme_minimal() +
geom_line(data = ds.disprun,aes(x=m_C, y = COT),color = "chartreuse4",linewidth=1)+
geom_line(data = ds.dispfly,aes(x=m_C, y = COT),color = "red",linewidth=1)+
geom_line(data = ds.dispswim,aes(x=m_C, y = COT),color = "blue",linewidth=1)+
labs(y= "Cost of transport (J/m)", x = "Body size (g)")+
theme(axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"))
E0_plot <- ggplot(ds.disprun, aes(x=m_C, y = E_0)) +
geom_line() +
scale_x_log10(labels = scales::trans_format("log10", scales::math_format(10^.x))) +
scale_y_log10(labels = scales::trans_format("log10", scales::math_format(10^.x))) +
theme_minimal() +
geom_line(data = ds.disprun,aes(x=m_C, y = E_0),color = "chartreuse4",linewidth=1)+
geom_line(data = ds.dispfly,aes(x=m_C, y = E_0),color = "red",linewidth=1)+
geom_line(data = ds.dispswim,aes(x=m_C, y = E_0),color = "blue",linewidth=1)+
labs(y= "Energy storage (J)", x = "Body size (g)")+
theme(axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"))
plot_grid(E0_plot, BMR_plot, labels = c('a','b'))
plot_grid(COT_plot,vC_plot, labels = c('c','d'))
plot_grid(E0_plot, BMR_plot, COT_plot,vC_plot, labels = c('a','b','c','d'))
# Export model predictions
run <- ds.disprun |>
select(m_C,disp_dist)
write_csv(run,"rundispdistance.csv")
fly <- ds.dispfly |>
select(m_C,disp_dist)
write_csv(fly,"flydispdistance.csv")
swim <- ds.dispswim |>
select(m_C,disp_dist)
write_csv(swim,"swimdispdistance.csv")
rm(list=ls())
library(rstudioapi)
library(tidyverse)
library(cowplot)
setwd(dirname(getActiveDocumentContext()$path))
disp_fun <- function(m_C,movement_mode,lambda) {
## A) Body mass conversion
m_C_kg = m_C/1000
## B) Speed variables (Dyer et al. 2023)
if(movement_mode == "running") {
v_0 = 0.28 } else if (movement_mode == "flying"){
v_0 = 30.54} else { v_0 = 0.39}
c = 0.27
d = 0.24
k = 0.033
v_C = (((1/k)*m_C_kg^c)/((m_C_kg^(c+d)) + (1/(k*v_0))))*3600
#  Parameter reference:
#  All movement modes from Dyer et al. (2023)
#  Given in m/s, converted to m/h, body mass in kg
## C) Energy loss via dispersal
if(movement_mode == "running") {
BMR = (3.248*m_C^0.735)*20 } else if (movement_mode == "flying"){
BMR = (7.434*m_C^0.648)*20 } else {BMR = (((10^1.87)*m_C_kg^0.95)/1.33)*20 }
#  Parameter reference:
#  Mammal (running) and
#  Bird (flying)    BMR from (Gavrilov et al. 2022)
#                   Given in mL o2/h, body mass in g, converted to J/h
#                   Conversion factor taken from Peters. (1986)
#  Fish (swimming) BMR from (Watanabe & Payne. 2023)
#                   Given in mg o2/h, body mass in kg, converted to J/h
#                   Conversion factor taken from Peters. (1986)
if(movement_mode == "running") {
COT = 10.7*m_C_kg^0.68 } else if (movement_mode == "flying"){
COT = 3.6*m_C_kg^0.69 } else {COT = 1.1*m_C_kg^0.62}
#  Parameter reference:
#  All movement modes from Alexander. (2003) in J/m, body mass in kg
FMR_disp = BMR + COT*v_C
# TOOK THIS OUT FOR NOW: Factor of 1.2 accounts for the additional cost of lifting body from the ground - Peters. (1993)
## D) Energy storage
if(movement_mode == "running") {
E_0 =  (((10^-1.30)*m_C^1)/1000)*40*10^6  } else if (movement_mode == "flying"){
E_0 =  (((10^-1.20)*m_C^0.98)/1000)*40*10^6 } else {E_0 = ((10^0.62)*m_C^0.02)*m_C*1000 }
# Parameter reference:
# Mammal (running) and
# Bird (flying)   E_0 from Antol & Kozlowski. (2020)
#                 Gives energy in log10 g converted to kg and then J
#                 Conversion factor from Peters. (1986)
# Fish (swimming) E_0 calculated using data from Martin et al. (2018)
#                 Refitted energy density/length data, converting length to mass
#                 Gives energy density in kJ/g converted to J
#                 Conversion factor from Webb. (1975) in Peters. (1986)
## Calculate time in h
t = ((1-lambda) * E_0 )/ FMR_disp
## Calculate dispersal distance in m
disp_dist = (t*v_C)
ds.disp <- cbind(m_C_kg, E_0, v_C, t, FMR_disp, disp_dist, BMR, COT,lambda)
return(ds.disp)
}
disp_fun(m_C = 20000,movement_mode = "running", lambda = 0.1)
# Calculate dispersal distances across body mass gradient (mass values based on empirical data available)
# For each movement mode
ds.disprun  <- data.frame()
for(m_C in seq(7.6,3940034.28
, length = 100)) {
disp = as.data.frame(disp_fun(m_C,movement_mode = "running",lambda = 0.1))
mass_disp = cbind(m_C, disp)
ds.disprun = rbind(ds.disprun, mass_disp)
}
ds.dispfly  <- data.frame()
for(m_C in seq(3.1,11800
, length = 100)) {
disp = as.data.frame(disp_fun(m_C,movement_mode = "flying",lambda = 0.1))
mass_disp = cbind(m_C, disp)
ds.dispfly = rbind(ds.dispfly, mass_disp)
}
ds.dispswim  <- data.frame()
for(m_C in seq(220, 550000, length = 100)) {
disp = as.data.frame(disp_fun(m_C,movement_mode = "swimming",lambda = 0.1))
mass_disp = cbind(m_C, disp)
ds.dispswim = rbind(ds.dispswim, mass_disp)
}
# Plot dispersal distance against body mass
ggplot(ds.disprun, aes(x=m_C, y = disp_dist)) +
geom_line() +
scale_x_log10(labels = scales::trans_format("log10", scales::math_format(10^.x))) +
scale_y_log10(labels = scales::trans_format("log10", scales::math_format(10^.x))) +
theme_minimal() +
geom_line(data = ds.disprun,aes(x=m_C, y = disp_dist),color = "chartreuse4",linewidth=1)+
geom_line(data = ds.dispfly,aes(x=m_C, y = disp_dist),color = "red",linewidth=1)+
geom_line(data = ds.dispswim,aes(x=m_C, y = disp_dist),color = "blue",linewidth=1)+
labs(y= "Dispersal distance (m)", x = "Body size (g)")
# Model summary for each movement mode
model.disprun <- lm(log10(disp_dist) ~ log10(m_C), data = ds.disprun)
summary(model.disprun)
model.dispfly <- lm(log10(disp_dist) ~ log10(m_C), data = ds.dispfly)
summary(model.dispfly)
model.dispswim <- lm(log10(disp_dist) ~ log10(m_C), data = ds.dispswim)
summary(model.dispswim)
## Plot parameters against body mass
#custom label needed for speed graph
custom_labels <- c(expression(10^2.5), expression(10^3), expression(10^3.5), expression(10^4), expression(10^4.5))
custom_breaks <- c(10^2.5, 10^3, 10^3.5, 10^4, 10^4.5)
vC_plot <- ggplot(ds.disprun, aes(x = m_C, y = v_C)) +
geom_line() +
scale_x_log10(labels = scales::trans_format("log10", scales::math_format(10^.x))) +
scale_y_continuous(breaks = custom_breaks, labels = custom_labels, trans = "log10") +
theme_minimal() +
geom_line(data = ds.disprun, aes(x = m_C, y = v_C), color = "chartreuse4", linewidth = 1) +
geom_line(data = ds.dispfly, aes(x = m_C, y = v_C), color = "red", linewidth = 1) +
geom_line(data = ds.dispswim, aes(x = m_C, y = v_C), color = "blue", linewidth = 1) +
labs(y = "Movement speed (m/h)", x = "Body size (g)") +
theme(axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"))
BMR_plot <- ggplot(ds.disprun, aes(x=m_C, y = BMR)) +
geom_line() +
scale_x_log10(labels = scales::trans_format("log10", scales::math_format(10^.x))) +
scale_y_log10(labels = scales::trans_format("log10", scales::math_format(10^.x))) +
theme_minimal() +
geom_line(data = ds.disprun,aes(x=m_C, y = BMR),color = "chartreuse4",linewidth=1)+
geom_line(data = ds.dispfly,aes(x=m_C, y = BMR),color = "red",linewidth=1)+
geom_line(data = ds.dispswim,aes(x=m_C, y = BMR),color = "blue",linewidth=1)+
labs(y= "Basal metabolic rate (J/h)", x = "Body size (g)")+
theme(axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"))
COT_plot <- ggplot(ds.disprun, aes(x=m_C, y = COT)) +
geom_line() +
scale_x_log10(labels = scales::trans_format("log10", scales::math_format(10^.x))) +
scale_y_log10(labels = scales::trans_format("log10", scales::math_format(10^.x))) +
theme_minimal() +
geom_line(data = ds.disprun,aes(x=m_C, y = COT),color = "chartreuse4",linewidth=1)+
geom_line(data = ds.dispfly,aes(x=m_C, y = COT),color = "red",linewidth=1)+
geom_line(data = ds.dispswim,aes(x=m_C, y = COT),color = "blue",linewidth=1)+
labs(y= "Cost of transport (J/m)", x = "Body size (g)")+
theme(axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"))
E0_plot <- ggplot(ds.disprun, aes(x=m_C, y = E_0)) +
geom_line() +
scale_x_log10(labels = scales::trans_format("log10", scales::math_format(10^.x))) +
scale_y_log10(labels = scales::trans_format("log10", scales::math_format(10^.x))) +
theme_minimal() +
geom_line(data = ds.disprun,aes(x=m_C, y = E_0),color = "chartreuse4",linewidth=1)+
geom_line(data = ds.dispfly,aes(x=m_C, y = E_0),color = "red",linewidth=1)+
geom_line(data = ds.dispswim,aes(x=m_C, y = E_0),color = "blue",linewidth=1)+
labs(y= "Energy storage (J)", x = "Body size (g)")+
theme(axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"))
plot_grid(E0_plot, BMR_plot, labels = c('a','b'))
plot_grid(COT_plot,vC_plot, labels = c('c','d'))
plot_grid(E0_plot, BMR_plot, COT_plot,vC_plot, labels = c('a','b','c','d'))
rm(list=ls())
library(tidyverse)
library(cowplot)
setwd('C:/Users/xr49abiw/Documents/DispersalProject/data')
### Importing empirical data
dispdata <- read.csv("DispersalTransformed.csv")
##  Filtering data for maximum dispersal distance data for running mammals, flying birds and swimming fish
#   Removing NA, NaN and Inf values
dispdatamax <- dispdata |>
filter(Movement.Mode != "Mixed" & Family_gbif != "Delphinidae" & Family_gbif != "Physeteridae"&
((Class_gbif == "Mammalia" & Movement.Mode == "Running") |
(Class_gbif == "Aves" & Movement.Mode == "Flying") | Movement.Mode == "Swimming")) |>
filter(Statistic == "Maximum") |>
filter(!is.na(Value) & !is.infinite(Value) & !is.nan(Value),
!is.na(Body.mass) & !is.infinite(Body.mass) & !is.nan(Body.mass),
!is.na(Movement.Mode) )
##filtering for each movement mode
run_max<- dispdatamax|> filter (Movement.Mode == "Running") |> select(Species_ID_gbif,Value,Body.mass,Movement.Mode)
fly_max <- dispdatamax |> filter (Movement.Mode == "Flying")|> select(Species_ID_gbif,Value,Body.mass,Movement.Mode)
swim_max <- dispdatamax |> filter (Movement.Mode == "Swimming")|> select(Species_ID_gbif,Value,Body.mass,Movement.Mode)
###Importing theoretical predictions
modelbird <-read.csv("flydispdistance.csv")
modelmamm<-read.csv("rundispdistance.csv")
modelfish<-read.csv("swimdispdistance.csv")
###Creating plots for each movement mode
#setting colours
mov_colour <- c('Flying' = 'red', 'Swimming' = 'blue', 'Running' = 'palegreen4',
'Model Flying' = 'darkred', 'Model Swimming' = 'midnightblue', 'Model Running' = 'darkgreen')
##flying birds
scatter_plot_fly <- fly_max |>
ggplot(aes(x = Body.mass, y = Value, color = Movement.Mode)) +
geom_point(size = 2, alpha = 0.2) +
geom_smooth(method = "gam", se = T) +
geom_line(data = modelbird, aes(x = m_C, y = disp_dist), linewidth = 1, color = mov_colour['Model Flying']) +
labs(x = "Log10 Body mass (g)", y = "Log10 maximum dispersal distance (m)") +
scale_color_manual(name = "Movement Mode", values = mov_colour, guide = "none")+
theme_minimal_grid() +
scale_x_log10(
labels = scales::trans_format("log10", scales::math_format(10^.x)),
breaks = c(1e0, 1e2, 1e4, 1e6),
limits = c(1e0, 1e7)
) +
scale_y_log10(
labels = scales::trans_format("log10", scales::math_format(10^.x)),
breaks = c(1e0, 1e2, 1e4, 1e6, 1e8),
limits = c(1e0, 1e8)
) +
ggtitle("")+
theme(
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.text = element_text(size = 18),
axis.title = element_text(size = 18),
title = element_text(size = 18, face = "bold"))
plot(scatter_plot_fly)
##running mammals
scatter_plot_run <- run_max |>
ggplot(aes(x = Body.mass, y = Value, color = Movement.Mode)) +
geom_point(size = 2, alpha = 0.2) +
geom_smooth(method = "gam", se = T) +
geom_line(data = modelmamm, aes(x = m_C, y = disp_dist), linewidth = 1, color = mov_colour['Model Running']) +
labs(x = "Log10 Body mass (g)", y = "Log10 maximum dispersal distance (m)") +
scale_color_manual(name = "Movement Mode", values = mov_colour, guide = "none") +
theme_minimal_grid()  +
scale_x_log10(
labels = scales::trans_format("log10", scales::math_format(10^.x)),
breaks = c(1e0, 1e2, 1e4, 1e6),
limits = c(1e0, 1e7)
) +
scale_y_log10(
labels = scales::trans_format("log10", scales::math_format(10^.x)),
breaks = c(1e0, 1e2, 1e4, 1e6, 1e8),
limits = c(1e0, 1e8)
) +
ggtitle("")+
theme(
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.text = element_text(size = 18),
axis.title = element_text(size = 18),
title = element_text(size = 18, face = "bold"))
plot(scatter_plot_run)
##swimming fish
scatter_plot_swim <- swim_max |>
ggplot(aes(x = Body.mass, y = Value, color = Movement.Mode)) +
geom_point(size = 2, alpha = 0.2) +
geom_smooth(method = "gam", se = T) +
geom_line(data = modelfish, aes(x = m_C, y = disp_dist), linewidth = 1, color = mov_colour['Model Swimming']) +
labs(x = "Log10 Body mass (g)", y = "Log10 maximum dispersal distance (m)") +
scale_color_manual(name = "Movement Mode", values = mov_colour, guide = "none")+
theme_minimal_grid()  +
scale_x_log10(
labels = scales::trans_format("log10", scales::math_format(10^.x)),
breaks = c(1e0, 1e2, 1e4, 1e6),
limits = c(1e0, 1e7)
) +
scale_y_log10(
labels = scales::trans_format("log10", scales::math_format(10^.x)),
breaks = c(1e0, 1e2, 1e4, 1e6, 1e8),
limits = c(1e0, 1e8)
) +
ggtitle("") +
theme(
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.text = element_text(size = 18),
axis.title = element_text(size = 18),
title = element_text(size = 18, face = "bold"))
plot(scatter_plot_swim)
grid.arrange(scatter_plot_fly, scatter_plot_run,scatter_plot_swim, ncol = 2)
##combined graph
scatter_plots_allmovmod <- dispdatamax |>
ggplot(aes(x = Body.mass, y = Value, color = Movement.Mode)) +
geom_point(size = 1, alpha = 0.2) +
geom_smooth(method = "gam", se = FALSE) +
geom_line(data = modelmamm, aes(x = m_C, y = disp_dist), linewidth = 1, color = mov_colour['Model Running']) +
geom_line(data = modelbird, aes(x = m_C, y = disp_dist), linewidth = 1, color = mov_colour['Model Flying']) +
geom_line(data = modelfish, aes(x = m_C, y = disp_dist), linewidth = 1, color = mov_colour['Model Swimming']) +
labs(x = "Log10 Body mass (g)", y = "Log10 maximum Dispersal distance (m)") +
scale_x_log10(labels = scales::trans_format("log10", scales::math_format(10^.x))) +
scale_y_log10(labels = scales::trans_format("log10", scales::math_format(10^.x))) +
scale_color_manual(name = "Movement Mode", values = mov_colour) +
theme_minimal()
print(scatter_plots_allmovmod)
grid.arrange(scatter_plot_fly, scatter_plot_run,scatter_plot_swim, ncol = 2)
rm(list=ls())
library(tidyverse)
setwd('C:/Users/xr49abiw/Documents/DispersalProject/data')
db <- read.csv("DispersalUntransformed.csv")
db1 <- db |>
filter(Units != "km/h", Units != "ha") |>
filter(
!is.na(Value), !is.na(Body.mass))
####Converting units for body mass and distance####
#converting units to meters
db2 <- db1 |>
mutate(Value = case_when(Units == "km"  ~ Value * 1000,
Units == "miles"  ~ Value * 1609.34,
Units == "m"~ Value,
TRUE ~ NA))
db3 <- db2 |>
mutate(Units = "m")
#converting kg to grams for body masses
db4 <- db3 |>
mutate(Body.mass = case_when(Body.mass.Units == "kg"  ~ Body.mass * 1000,  TRUE ~ Body.mass))
db5 <- db4 |>
mutate(Body.mass.Units = "g")
#Method checking
db6 <- db5 |>
group_by(Class_gbif == "Aves") %>% mutate(New.Sampling.Method = case_when(is.na(New.Sampling.Method) &&
Sampling.method %in% c("Radio-tracking", "Radio tracking", "Satellite tracking") ~ "Tracking",
is.na(New.Sampling.Method) &&
Sampling.method %in% c("Mark-Recapture", "Banding shot", "Mark recapture", "Banding recapture", "Ringing", "Colour marking","Wing tagging","Trapping") ~ "Mark-recapture",
is.na(New.Sampling.Method) &&
Sampling.method %in% c("Nest box observation", "Observation") ~ "Direct observation",
is.na(New.Sampling.Method) &&
Sampling.method %in% c("Radio tracking/banding") ~ "Mixed",
!is.na(New.Sampling.Method) ~ New.Sampling.Method,
TRUE ~ "Unknown")) %>% ungroup()
db7 <- db6 |>
group_by(is.na(Class_gbif)) %>% mutate(New.Sampling.Method = case_when(Sampling.method %in% c("Radio-tracking") ~ "Tracking",
Sampling.method %in% c("Mark-Recapture") ~ "Mark-recapture",
T ~  "Unknown")) %>% ungroup()
write_csv(db7, "DispersalFull.csv")
##Making combined values for McCaslin and Swift - as many maximum values for one species
# For McCaslin et al. 2020
dbcombmc <- db7 %>%
filter(Reference == "McCaslin et al. 2020") %>%
group_by(Species_ID_gbif) %>%
summarise(
Value_mean = mean(Value, na.rm = TRUE),
Source = "McCaslin et al. 2020",
across(everything(), ~ first(.)),
.groups = 'drop'
) %>%
distinct()
# For Swift et al. 2021
dbcombs <- db7 %>%
filter(Reference == "Swift et al. 2021") %>%
group_by(Species_ID_gbif) %>%
summarise(
Value_mean = mean(Value, na.rm = TRUE),
Source = "Swift et al. 2021",
across(everything(), ~ first(.)),
.groups = 'drop'
) %>%
distinct()
# Combine the results
combfinal <- bind_rows(dbcombs, dbcombmc)
# Replace the original data for McCaslin et al. 2020 and Swift et al. 2021 with summarised values
db8 <- db7 %>%
filter(!Reference %in% c("McCaslin et al. 2020", "Swift et al. 2021")) %>%
bind_rows(
db7 %>%
filter(Reference == "McCaslin et al. 2020") %>%
group_by(Species_ID_gbif) %>%
summarise(
Value = mean(Value, na.rm = TRUE),
Source = "McCaslin et al. 2020",
across(everything(), ~ first(.)),
.groups = 'drop'
) %>%
distinct(),
db7 %>%
filter(Reference == "Swift et al. 2021") %>%
group_by(Species_ID_gbif) %>%
summarise(
Value = mean(Value, na.rm = TRUE),
Source = "Swift et al. 2021",
across(everything(), ~ first(.)),
.groups = 'drop'
) %>%
distinct()
) %>%
distinct()
write_csv(db8, "DispersalTransformed.csv")
